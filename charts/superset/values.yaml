# Default values for superset.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.


replicaCount: 1

## Set default image, imageTag, and imagePullPolicy.
image:
  repository: "amancevice/superset"
  tag: "0.28.1"
  pullPolicy: "IfNotPresent"
  pullSecrets: []

initFile: |-
  /usr/local/bin/superset-init --username admin --firstname admin --lastname user --email admin@fab.org --password admin
  superset runserver

configFile: |-
  #---------------------------------------------------------
  # Superset specific config
  #---------------------------------------------------------
  ROW_LIMIT = 5000
  SUPERSET_WORKERS = 2

  SUPERSET_WEBSERVER_PORT = 8088
  #---------------------------------------------------------

  #---------------------------------------------------------
  # Flask App Builder configuration
  #---------------------------------------------------------
  # Your App secret key
  SECRET_KEY = '\2\1thisismyscretkey\1\2\e\y\y\h'

  SQLALCHEMY_DATABASE_URI = 'sqlite:////var/lib/superset/superset.db'


  # Flask-WTF flag for CSRF
  WTF_CSRF_ENABLED = True
  # Add endpoints that need to be exempt from CSRF protection
  WTF_CSRF_EXEMPT_LIST = []

  # Set this API key to enable Mapbox visualizations
  MAPBOX_API_KEY = ''

## Extra confiuguration files and their content to be made available next to the config file
extraConfigFiles: {}

extraEnv: {}

extraEnvFromSecret: ""

persistence:

  ## If true, superset server will create/use a Persistent Volume Claim
    ## If false, use emptyDir
    ##
  enabled: false

  accessModes:
    - ReadWriteOnce

  ## superset data Persistent Volume size
  ##
  size: 8Gi


  existingClaim: ""


service:
  type: ClusterIP
  port: 9000

  ## service annotations
  annotations: {}

  loadBalancerSourceRanges: []
  # - 172.31.0.0/16


ingress:
  ## If true, superset Ingress will be created
  ##
  enabled: true

  ## superset Ingress annotations
  annotations: {}

  host: ${host}

  path: /

  tls: []

nodeSelector: {}

tolerations: []

affinity: {}

resources: {}

livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 80
  timeoutSeconds: 5
  periodSeconds: 10
  failureThreshold: 2
readinessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 60
  timeoutSeconds: 5
  periodSeconds: 10
  failureThreshold: 2
